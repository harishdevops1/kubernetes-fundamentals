K8s Concepts:
=============

Node:
=====

    - Worker machine in K8s know as Minion
    - Physical or VM depending on the cluster
    - Contains necessary components to run PODS and is managed by master components
    - Services in Node include 

        - Container Runtime
        - kubelet
        - kubeproxy

Controller:
============

    - Master component
    - Manages various aspects of nodes
    - Monitors Node health
    - Create and manage multiple PODS for you

    Self Registration of nodes:
    ---------------------------

        --register-node , kubelet will attempt to register itself with the API Server
        --kubeconfig


Master Node Communication:
==========================

        - Comms between cluster to master terminate at the API Server
        - Master components communicate with the cluster apiserver over secure port
        

        Master to Cluster:
        ===================

            API Server => kubelet
            API Server => Node,POD or Service through API server's proxy functionality


POD:
=====

    - Simplest unit of execution 
    - Group of one or more containers with shared storage/Network and a spec to run the containers.
    - Application contianers that are tightly coupled
    - Docker is most common container runtime used in a K8s POD
    - Types of PODS
        - PODS with single containers
        - PODS with multiple Containers
    - Each POD is meant to run a single instance of the given application
    - Scale Horizontally => Use multiple PODS
    - Replication is done by the Controller
    - Two kinds of shared resources
        - Networking - Unique IP Address per POD
        - Storage 
            * Shared Storage volumes
            * Containers in the POD can access the shared volumes allowing them to share data
    - Pods don't self heal
    - Manage PODS using the Controller

POD Templates:
==============

    - POD specifications
    - Controllers use POD spec to create PODS


    apiVersion:v1
    kind:Pod
    metadata:
        name:my-app
        labels:
            app:myapp
    spec:
        containers:
        -   name: myapp-Controller
            image:BusyBox
            command: ['sh', '-c', 'echo Hello Kubernetes! && sleep 3600']

POD Lifecycle:
===============

    Pending => Running <=> Failed <=> Succeeded <=> Unknown



  Scheduler:
  ==========

    - Scheduler decides which pod goes on which node
    - Doesn't place the pod itself
    - kubelet does the placing of the pod in node
    - Scheduler does the matching with the best resources in the node
    - Rank Nodes
    - Free Resources once we place the POD

  ETCD:
  =====

  	- Distributed K:V store
  	- ETCD stores info about
  	- Listens in port 2379

    - Nodes
    - PODS
    - Configs
    - Secrets
    - Accounts
    - Roles
    - Bindings

 API Server:
 ===========

 	- Scheduler continuously monitors the API server with pod with no node assigned
    - Scheduler identifies the right node to place the POD

    - Authenticate User
    - Validate Request
    - Retrieve data
    - Update ETCD
    - Scheduler
    - Kubelet

Kubelet:
=========

Register the node in the K8s cluster
Create PODS
Monitors Nodes and PODS
Kubeadm doesn't deploy Kubelet


ps -aux | grep Kubelet
            

Kube Proxy:
===========

    - POD Network is the internal network connecting all nodes in the cluster
    - internal comms is done using a Service
    - Communication between various services in the cluster


    - Kube-proxy runs on each node
    - Look for new Services and direct traffic from the POD through that Service
    - IP Table rules






